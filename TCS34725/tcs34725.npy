const _TCS34725_ADDRESS          = 0x29  # Address of the Sensor

const _TCS34725_ENABLE           = 0x00  # Enable register
const _TCS34725_COMMAND_BIT      = 0x80
const _TCS34725_CDATAL           = 0x14  # Clear channel register
const _TCS34725_RDATAL           = 0x16  # Red channel register
const _TCS34725_GDATAL           = 0x18  # Green channel register
const _TCS34725_BDATAL           = 0x1A  # Blue channel register

const _TCS34725_ENABLE_AEN       = 0x02  # RGBC Enable - Writing 1 actives the ADC, 0 disables it
const _TCS34725_ENABLE_PON       = 0x01  # Power on - Writing 1 activates the internal oscillator, 0 disables it

class TCS34725:
    _initialized:bool

    def init():
        writeI2CByte(_TCS34725_ADDRESS, _TCS34725_ENABLE | _TCS34725_COMMAND_BIT, _TCS34725_ENABLE_AEN | _TCS34725_ENABLE_PON)
        delay(100)
        _initialized = true

    def readRGBCRaw()->int[]:
        if not _initialized: init()
        r = readI2CInt(_TCS34725_ADDRESS, _TCS34725_RDATAL | _TCS34725_COMMAND_BIT)
        g = readI2CInt(_TCS34725_ADDRESS, _TCS34725_GDATAL | _TCS34725_COMMAND_BIT)
        b = readI2CInt(_TCS34725_ADDRESS, _TCS34725_BDATAL | _TCS34725_COMMAND_BIT)
        c = readI2CInt(_TCS34725_ADDRESS, _TCS34725_CDATAL | _TCS34725_COMMAND_BIT)
        ret:int[4]
        ret[0] = r
        ret[1] = g
        ret[2] = b
        ret[3] = c
        return ret

    def readRGB()->byte[]:
        rgbraw:int[4] = readRGBCRaw()

        r_ratio:float   = rgbraw[0]
        g_ratio:float   = rgbraw[1]
        b_ratio:float   = rgbraw[2]
        
        if rgbraw[3] != 0
            r_ratio = r_ratio  / rgbraw[3]
            g_ratio = g_ratio  / rgbraw[3]
            b_ratio = b_ratio  / rgbraw[3]
        
        # Scale the ratios to the 0-255 range
        r_scaled:float   = r_ratio   * 255.0
        g_scaled:float   = g_ratio   * 255.0
        b_scaled:float   = b_ratio   * 255.0

        # Clamp the values to ensure they are within the 0-255 range
        ret:byte[3]
        ret[0] = bounds(r_scaled,0,255)
        ret[1] = bounds(g_scaled,0,255)
        ret[2] = bounds(b_scaled,0,255)
        return ret        

    def readALS()->int:
        if not _initialized: init()
        als = readI2CInt(_TCS34725_ADDRESS, _TCS34725_CDATAL | _TCS34725_COMMAND_BIT)
        return als